// アドレス
#define HT_I2C_ADDRESS 0x70

// コマンド
#define HT_CMS_DATA       0x00
#define HT_CMD_SYSSET     0x20
#define HT_CMD_BLINK      0x80
#define HT_CMD_BRIGHTNESS 0xE0

// System Setup レジスタ設定値
#define HT_SYSSET_OSC_ON  1

// Display setup 設定値
#define HT_BLINK_DISPLAY_ON B00000001
#define HT_BLINK_OFF        B00000000
#define HT_BLINK_2HZ        B00000010
#define HT_BLINK_1HZ        B00000100
#define HT_BLINK_05HZ       B00000110

// 表示パターン用バッファ(R16xC8)
uint32_t buff[8];  
uint8_t raw[32];

// テスト用パターン('さ','い','た','ま')
uint8_t font[4][8] = {
  {0x08,0x08,0x7E,0x04,0x24,0x40,0x3C,0x00},  // さ
  {0x00,0x88,0x84,0x82,0x82,0x50,0x20,0x00},  // い
  {0x20,0xF0,0x2E,0x40,0x48,0x50,0x8E,0x00},  // た
  {0x08,0x7E,0x08,0x7E,0x08,0x7C,0x7A,0x00}   // ま
};

// HT16K33の初期化
void ht_init() {
  Wire.begin();

  // #1
  ht_system_Seup(HT_I2C_ADDRESS, HT_SYSSET_OSC_ON);  // システムオシレータをONにする
  ht_display_setup(HT_I2C_ADDRESS,HT_BLINK_OFF) ;    // 点滅表示周期の設定
  ht_setBrightness(HT_I2C_ADDRESS,1);                // 明るさの設定

  // #2
  ht_system_Seup(HT_I2C_ADDRESS+1, HT_SYSSET_OSC_ON);  // システムオシレータをONにする
  ht_display_setup(HT_I2C_ADDRESS+1,HT_BLINK_OFF) ;    // 点滅表示周期の設定
  ht_setBrightness(HT_I2C_ADDRESS+1,1);                // 明るさの設定
}

// SystemSetup Registerの設定
// (システムオシレータのモード設定)
void ht_system_Seup(uint8_t addr, uint8_t p) {
  Wire.beginTransmission(addr);
  Wire.write(HT_CMD_SYSSET | p);
  Wire.endTransmission(); 
} 

// 明るさの設定
void  ht_setBrightness(uint8_t addr, uint8_t p) {
  if (p > 15) p = 15;
  Wire.beginTransmission(addr);
  Wire.write(HT_CMD_BRIGHTNESS | p);
  Wire.endTransmission(); 
}

// Display setup(点滅周期の設定)
void ht_display_setup(uint8_t addr, uint8_t p) {
  if (p > 3) p = 0;
  Wire.beginTransmission(addr);  
  Wire.write(HT_CMD_BLINK | HT_BLINK_DISPLAY_ON | p); 
  Wire.endTransmission();
}

// 表示パターンの送信
void ht_write(void) {
  uint8_t d;
  uint32_t msk;
  uint8_t t;

  // バッファデータを表示用生データに変換する
  msk = 0x00000001;
  t = 0;  
  for (uint8_t x=0; x <32; x++) {
   d = 0;
    for (uint8_t y=0; y < 8; y++) {
      if (msk & buff[y]) {
        d |= _BV(y);
      }
    }
    raw[t] = d;
    msk <<=1;
    t++;
  } 
  
  // HT16K33 #1 にデータ転送
  Wire.beginTransmission(HT_I2C_ADDRESS);
  Wire.write(HT_CMS_DATA);
  for (uint8_t i=0; i<8; i++) {
    Wire.write(raw[i+24]);    
    Wire.write(raw[i+16]);    
  }
  Wire.endTransmission();  

  // HT16K33 #2 にデータ転送
  Wire.beginTransmission(HT_I2C_ADDRESS+1);
  Wire.write(HT_CMS_DATA);
  for (uint8_t i=0; i<8; i++) {
    Wire.write(raw[i+8]);    
    Wire.write(raw[i]);    
  }
  Wire.endTransmission();  
}

// バッファのクリア
void ht_clear_buffer() {
    for (uint8_t i=0; i <8; i++) 
      buff[i] = 0;
}

// 表示のクリア
void ht_clear() {
  ht_clear_buffer();
  ht_write();
}

// バッファの指定座標のON/OFF
void ht_set_dot_buffer(uint8_t x, uint8_t y, uint8_t d) {
  if (d) {
    buff[y] |= 0x80000000 >> x;
  } else {
    buff[y] &= ~(0x80000000 >>x);
  }   
}

// バッファ上の指定座標に8x8パターンをセット
void write_bufat(uint8_t* fptr, uint8_t x, uint8_t y) {
  if (x>32 || y >7)
    return ;     
  for (byte j=y,i=0; i < 8; j++,i++)
    buff[j] |= (((uint32_t)(fptr[i]))<<24) >>x;
}

// バッファ上の指定座標に8x8パターンをセット(負座標指定可能)
void write_bufat2(uint8_t* fptr, int8_t x, int8_t y) {
  if (x>31 || y >7 || x < -7 || y <-7)
    return ;
  for (int8_t i=0,j=y; i < 8; i++,j++) {
    if (j>=0) {
      if (x>=0)
        buff[j] |= (((uint32_t)(fptr[i]))<<24) >>x;
      else 
        buff[j] |= (((uint32_t)(fptr[i]))<<24) <<(-x);      
    }
  }
}

// バッファ左スクロール
void scroll() {
   for (uint8_t i=0; i < 8; i++) {
      buff[i]<<=1;  // 各行を左にシフトする
   }
}

void setup() {
   ht_init();
   ht_clear();
}

void demo_test() {
  ht_clear();
  
  // バッファに"さいたま"のパターンを書き込む
  for (uint8_t i=0; i <4; i++) {
    write_bufat(font[i],i<<3, 0);
  }
    
  ht_write(); // バッファの内容を表示
  delay(500);
  
  // スクロール
  for (uint8_t i=0; i < 32; i++) {
    scroll();    // バッファ内を1ドット左にシフト
    ht_write();  // バッファの内容を表示
    delay(100);
  }  
}

// 指定座標へのパターン書込み
void demo_test2() {
  for (int8_t y=-7; y<8; y++) {
    for (int8_t x=-7; x<32; x++) {
     ht_clear_buffer();
     write_bufat2(font[0],x, y);
     ht_write();  // バッファの内容を表示
     delay(100);
    }
  }  
}  
  
void loop() {
 demo_test();
 delay(1000);  
 demo_test2();
 delay(1000);  
}
